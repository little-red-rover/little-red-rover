/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _TimeStamp {
    int32_t sec;
    uint32_t nanosec;
} TimeStamp;

typedef struct _TwistCmd {
    bool has_time;
    TimeStamp time;
    float v;
    float w;
} TwistCmd;

typedef struct _LaserScan {
    bool has_time;
    TimeStamp time;
    float angle_min;
    float angle_max;
    float angle_increment;
    float time_increment;
    float scan_time;
    float range_min;
    float range_max;
    pb_size_t ranges_count;
    float ranges[120];
    pb_size_t intensities_count;
    float intensities[120];
} LaserScan;

typedef struct _JointStates {
    bool has_time;
    TimeStamp time;
    pb_size_t name_count;
    char name[2][16];
    pb_size_t position_count;
    double position[2];
    pb_size_t velocity_count;
    double velocity[2];
    pb_size_t effort_count;
    double effort[2];
} JointStates;

typedef struct _UdpPacket {
    bool has_laser;
    LaserScan laser;
    bool has_joint_states;
    JointStates joint_states;
    bool has_cmd_vel;
    TwistCmd cmd_vel;
} UdpPacket;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define TimeStamp_init_default                   {0, 0}
#define TwistCmd_init_default                    {false, TimeStamp_init_default, 0, 0}
#define LaserScan_init_default                   {false, TimeStamp_init_default, 0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define JointStates_init_default                 {false, TimeStamp_init_default, 0, {"", ""}, 0, {0, 0}, 0, {0, 0}, 0, {0, 0}}
#define UdpPacket_init_default                   {false, LaserScan_init_default, false, JointStates_init_default, false, TwistCmd_init_default}
#define TimeStamp_init_zero                      {0, 0}
#define TwistCmd_init_zero                       {false, TimeStamp_init_zero, 0, 0}
#define LaserScan_init_zero                      {false, TimeStamp_init_zero, 0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define JointStates_init_zero                    {false, TimeStamp_init_zero, 0, {"", ""}, 0, {0, 0}, 0, {0, 0}, 0, {0, 0}}
#define UdpPacket_init_zero                      {false, LaserScan_init_zero, false, JointStates_init_zero, false, TwistCmd_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define TimeStamp_sec_tag                        1
#define TimeStamp_nanosec_tag                    2
#define TwistCmd_time_tag                        1
#define TwistCmd_v_tag                           2
#define TwistCmd_w_tag                           3
#define LaserScan_time_tag                       1
#define LaserScan_angle_min_tag                  2
#define LaserScan_angle_max_tag                  3
#define LaserScan_angle_increment_tag            4
#define LaserScan_time_increment_tag             5
#define LaserScan_scan_time_tag                  6
#define LaserScan_range_min_tag                  7
#define LaserScan_range_max_tag                  8
#define LaserScan_ranges_tag                     9
#define LaserScan_intensities_tag                10
#define JointStates_time_tag                     1
#define JointStates_name_tag                     2
#define JointStates_position_tag                 3
#define JointStates_velocity_tag                 4
#define JointStates_effort_tag                   5
#define UdpPacket_laser_tag                      1
#define UdpPacket_joint_states_tag               2
#define UdpPacket_cmd_vel_tag                    3

/* Struct field encoding specification for nanopb */
#define TimeStamp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    sec,               1) \
X(a, STATIC,   SINGULAR, UINT32,   nanosec,           2)
#define TimeStamp_CALLBACK NULL
#define TimeStamp_DEFAULT NULL

#define TwistCmd_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    v,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    w,                 3)
#define TwistCmd_CALLBACK NULL
#define TwistCmd_DEFAULT NULL
#define TwistCmd_time_MSGTYPE TimeStamp

#define LaserScan_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    angle_min,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    angle_max,         3) \
X(a, STATIC,   SINGULAR, FLOAT,    angle_increment,   4) \
X(a, STATIC,   SINGULAR, FLOAT,    time_increment,    5) \
X(a, STATIC,   SINGULAR, FLOAT,    scan_time,         6) \
X(a, STATIC,   SINGULAR, FLOAT,    range_min,         7) \
X(a, STATIC,   SINGULAR, FLOAT,    range_max,         8) \
X(a, STATIC,   REPEATED, FLOAT,    ranges,            9) \
X(a, STATIC,   REPEATED, FLOAT,    intensities,      10)
#define LaserScan_CALLBACK NULL
#define LaserScan_DEFAULT NULL
#define LaserScan_time_MSGTYPE TimeStamp

#define JointStates_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  time,              1) \
X(a, STATIC,   REPEATED, STRING,   name,              2) \
X(a, STATIC,   REPEATED, DOUBLE,   position,          3) \
X(a, STATIC,   REPEATED, DOUBLE,   velocity,          4) \
X(a, STATIC,   REPEATED, DOUBLE,   effort,            5)
#define JointStates_CALLBACK NULL
#define JointStates_DEFAULT NULL
#define JointStates_time_MSGTYPE TimeStamp

#define UdpPacket_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  laser,             1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  joint_states,      2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cmd_vel,           3)
#define UdpPacket_CALLBACK NULL
#define UdpPacket_DEFAULT NULL
#define UdpPacket_laser_MSGTYPE LaserScan
#define UdpPacket_joint_states_MSGTYPE JointStates
#define UdpPacket_cmd_vel_MSGTYPE TwistCmd

extern const pb_msgdesc_t TimeStamp_msg;
extern const pb_msgdesc_t TwistCmd_msg;
extern const pb_msgdesc_t LaserScan_msg;
extern const pb_msgdesc_t JointStates_msg;
extern const pb_msgdesc_t UdpPacket_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TimeStamp_fields &TimeStamp_msg
#define TwistCmd_fields &TwistCmd_msg
#define LaserScan_fields &LaserScan_msg
#define JointStates_fields &JointStates_msg
#define UdpPacket_fields &UdpPacket_msg

/* Maximum encoded size of messages (where known) */
#define JointStates_size                         107
#define LaserScan_size                           1254
#define MESSAGES_PB_H_MAX_SIZE                   UdpPacket_size
#define TimeStamp_size                           17
#define TwistCmd_size                            29
#define UdpPacket_size                           1397

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
